<?php
// PHP7/HTML5, EDGE/CHROME                                *** indexThisWorld.php ***

// ****************************************************************************
// *                          Игра "Жизнь" Конвея-Гарднера                    *
// ****************************************************************************

//                                                   Автор:       Труфанов В.Е.
//                                                   Дата создания:  07.01.2019
// Copyright © 2019 tve                              Посл.изменение: 10.04.2020
?>
<!DOCTYPE HTML>
<html>
<head>

<link rel="icon" href="/favicon.ico" type="image/x-icon">
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
<link rel="manifest" href="/manifest.json">
<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5">
<meta name="msapplication-TileColor" content="#ffc40d">
<meta name="theme-color" content="#ffffff">

<title>Этот мир придуман не мною</title>
<!-- Начало сценария -->
<script type="text/javascript">
   // Переменная для записи идентификатора процесса,
   // запускаемого с помощью функции setInterval():
   var timerID
   // Количество клеток по горизонтали и вертикали:
   var Nx=200,Ny=100
   // Размер клетки (в пикселях):
   var dz=3
   // Переменная для записи ссылки
   // на раскрывающийся список:
   var list
   // Переменные для записи ссылок на кнопки:
   var btnStart,btnConf
   // Два названия для одной из кнопок:
   var nameA="Начать жизнь"
   var nameB="Остановить"
   // Переменные для записи ссылок на объект графической
   // области и объект графического контекста:
   var canva,peace
   // Переменная для записи ссылки на массив, через который
   // реализуется конфигурация клеток:
   var A
   // Функция для определения начального распределения
   // живых и мертвых клеток:
   function init(B)
   {
      // Локальные переменные:
      var i,j,p
      // ------Вероятность того, что клетка живая:
      p=list.value
      // Перебор строк массива:
      for(i=0;i<B.length;i++){
         // Перебор элементов в строке:
         for(j=0;j<B[i].length;j++){
            // Если случайное число меньше вероятности:
            if(Math.random()<p){
               // Живая клетка:
               B[i][j]=1
            }
            // Если случайное число не меньше вероятности:
            else{
               // Мертвая клетка:
               B[i][j]=0
            }
         }
      }
   }
   // Функция для подсчета живых клеток, являющихся
   // соседними для заданной клетки:
   function getState(B,i,j){
      // Локальные переменные:
      var im,ip,jm,jp,r
      // Если клетка не в первой строке:
      if(i>0){
         // Первый индекс для соседней клетки сверху:
         im=i-1
      }
      // Если клетка в первой строке:
      else{
         // Первый индекс для соседней клетки "сверху":
         im=B.length-1
      }
      // Если клетка не в последней строке:
      if(i<B.length-1){
         // Первый индекс для соседней клетки снизу:
         ip=i+1
      }
      // Если клетка в последней строке:
      else{
         // Первый индекс для соседней клетки "снизу":
         ip=0
      }
      // Если клетка не в первом столбце:
      if(j>0){
         // Второй индекс для соседней клетки слева:
         jm=j-1
      }
      // Если клетка в первом столбце:
      else{
         // Второй индекс для соседней клетки "слева":
         jm=B[i].length-1
      }
      // Если клетка не в последнем столбце:
      if(j<B[i].length-1){
         // Второй индекс для соседней клетки справа:
         jp=j+1
      }
      // Если клетка в последнем столбце:
      else{
         // Второй индекс для соседней клетки "справа":
         jp=0
      }
      // Вычисление количества живых соседних клеток:
      r=B[i][jm]+B[i][jp]+B[im][j]+B[ip][j]+B[im][jm]+B[ip][jp]+B[im][jp]+B[ip][jm]
      // Результат функции:
      return r
   }
   
   
   // Функция для вычисления новой конфигурации
   // (нового поколения клеток):
   function recalc(B){
      // Локальная переменная:
      var nbs
      // Локальный массив для записи новой конфигурации:
      var C=new Array(B.length)
      // Перебор элементов локального массива:
      for(var i=0;i<C.length;i++){
         // Создание новой строки:
         C[i]=new Array(B[i].length)
         // Перебор элементов в строке:
         for(var j=0;j<C[i].length;j++){
            // Количество живых соседних клеток для
            // исходной конфигурации:
            nbs=getState(B,i,j)
            // Если текущая клетка в исходной
            // конфигурации мертвая:
            if(B[i][j]==0){
               // Если ровно три живых соседних клетки:
               if(nbs==3){
                  // В новой конфигурации клетка оживает:
                  C[i][j]=1
               }
               // Если живых клеток не три:
               else{
                  // В новой конфигурации клетка остается
                  // мертвой:
                  C[i][j]=0
               }
            }
            // Если текущая клетка в исходной
            // конфигурации живая:
            else{
               // Если живых соседних клеток две или три:
               if((nbs==2)||(nbs==3)){
                  // В новой конфигурации клетка остается
                  // живой:
                  C[i][j]=1
               }
               // Если живых соседних клеток
               // не три и не две:
               else{
                  // В новой конфигурации клетка
                  // становится мертвой:
                  C[i][j]=0
               }
            }
         }
      }
      // Результат функции:
      return C
   }
   // Функция для отображения картинки на основе
   // конфигурации живых и мертвых клеток:
   function show(B){
      // Очистка графической области:
      peace.clearRect(0,0,canva.width,canva.height)
      // Синий цвет для выполнения заливки области
      // с живыми клетками:
      peace.fillStyle="blue"
      // Перебор строк массива:
      for(var i=0;i<B.length;i++){
         // Перебор элементов в строке:
         for(var j=0;j<B[i].length;j++){
            // Если клетка живая:
            if(B[i][j]==1){
               // Заливка области клетки цветом:
               peace.fillRect(dz*j,dz*i,dz,dz)
            }
         }
      }
   }
   // Функция для вычисления новой конфигурации
   // и отображения картинки:
   function showNext(){
      // Новая конфигурация:
      A=recalc(A)
      // Отображение новой картинки:
      show(A)
   }
   // Функция для вызова при генерировании начальной
   // конфигурации клеток:
   function btnConfig(){
      // Начальное распределение живых и мертвых клеток:
      init(A)
      // Отображение картинки:
      show(A)
   }
   // Обработчик события, связанного с загрузкой документа:
   window.onload=function()
   {
      // Получение ссылки на объект графической области:
      canva=document.getElementById("mycanvas")
      // Ширина графической области:
      canva.width=Nx*dz
      // Высота графической области:
      canva.height=Ny*dz
      // Ширина формы с элементами управления:
      document.getElementById("myform").style.width=canva.width-10+"px"
      // Подготавливаем элемент <canvas> к работе в двумерном рисованиии и
      // получаем ссылку на объект графического контекста:
      peace=canva.getContext("2d")
      // Получение ссылки на объект кнопки выбора
      // начальной конфигурации живых и мертвых клеток:
      btnConf=document.getElementById("btnConf")
      // Кнопка выбора конфигурации в активном состоянии:
      btnConf.disabled=false
      // Получение ссылки на объект кнопки, используемой
      // для запуска и остановки вычислений:
      btnStart=document.getElementById("btnStart")
      // Название для кнопки запуска вычислений:
      btnStart.value=nameA
      // Получение ссылки на объект раскрывающегося списка:
      list=document.getElementById("prob")
      // Список в активном состоянии:
      list.disabled=false
      // Индекс выбранного в списке пункта:
      var index=1
      // Выбор пункта в раскрывающемся списке:
      list.selectedIndex=index
      // Массив для реализации конфигурации клеток:
      A=new Array(Ny)
      // Создание каждой отдельной строки:
      for(var k=0;k<A.length;k++){
         // Новая строка:
         A[k]=new Array(Nx)
      }
      // Начальная конфигурация:
      btnConfig()
      // Обработчик щелчка на кнопке выбора конфигурации:
      btnConf.onclick=btnConfig
      // Обработчик для события, связанного с изменением
      // состояния раскрывающегося списка:
      list.onchange=btnConf.onclick
      // Обработчик события, связанного со щелчком
      // на кнопке запуска/остановки вычислений:
      btnStart.onclick=function(){
         // Если у кнопки первое название:
         if(this.value==nameA){
            // Блокировка раскрывающегося списка:
            list.disabled=true
            // Блокировка кнопки выбора конфигурации:
            btnConf.disabled=true
            // Изменение называния кнопки:
            this.value=nameB
            // Запуск процесса вычислений:
            timerID=setInterval(showNext,100)
         }
         // Если у кнопки другое название:
         else{
            // Отмена блокировки раскрывающегося списка:
            list.disabled=false
            // Отмена блокировки кнопки
            // выбора конфигурации:
            btnConf.disabled=false
            // Изменение названия кнопки:
            this.value=nameA
            // Остановка процесса вычислений:
            clearInterval(timerID)
         }
      }
   }
</script>
<!-- Завершение сценария -->
<!-- Описание стилей -->
<style type="text/css">
   /* Стиль для формы myform */
   #myform{
      height: 30px;
      border-style: outset;
      padding: 5px;
      background-color: #f0f0f0;
      font-size: 17px;
   }
   /* Стиль для кнопок формы myform */
   #myform input[type="button"]{
      font-weight: bold;
      height: 30px;
   }
   /* Стиль для раскрывающегося списка формы myform */
   #myform select{
      height: 30px;
      border-color: silver;
      font-weight: bold;
   }
</style>
<!-- Завершение описания стилей -->
</head>
<body>
   <h3> Этот мир не придуман, это просто новая  жизнь! . . . . . Мартин Гарднер </h3><hr>
   <!-- Форма с элементами управления -->
   <form id="myform">
      <!-- Текст -->
      <b>Плотность населения</b>
      <!-- Раскрывающийся список -->
      <select size="1" id="prob">
         <option value="0.1">0.10</option>
         <option value="0.2">0.20</option>
         <option value="0.3">0.30</option>
         <option value="0.5">0.50</option>
         <option value="0.75">0.75</option>
      </select>
      <!-- Кнопка выбора конфигурации -->
      <input type="button" id="btnConf" value="Новая конфигурация">
      <!-- Кнопка начала и остановки вычислений -->
      <input type="button" id="btnStart" style="width:120px;">
   </form>
   <!-- Графическая область -->
   <canvas id="mycanvas" style="border:ridge;"></canvas>
</body>
</html>
<?php
//  <!-- --> ************************************************ ThisWorld.php ***
